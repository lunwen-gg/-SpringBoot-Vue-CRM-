目录
第一章  绪论	5
1.1 课题背景	5
1.2 研究的目的与意义	5
1.3 研究的内容	6
1.4 论文的组织	7
第二章 开发技术	9
2.1 Spring Boot与Vue相结合的开发模式	9
2.2 CRM系统概述	10
2.3 AOP定时任务	10
2.4 Vue3框架	11
第三章 系统分析	13
3.1可行性分析	13
3.1.1商业可行性	13
3.1.2软件可行性	13
3.1.3外包可行性	14
3.1.4可行性分析结论	14
3.2需求分析	14
3.3模块分析	16
第四章 系统设计	19
4.1系统分层介绍	19
4.2系统功能结构	19
4.3系统功能设计	20
4.4数据库设计	21
4.4.1数据库需求分析	21
4.4.2实体之间的E–R模型	22
4.4.3 数据库逻辑结构设计	23
第五章 系统实现	27
5.1系统模块的具体实现	27
5.1.1伙伴录入模块	27
5.1.2伙伴查询模块	29
5.1.3伙伴管理模块	30
5.1.4系统设置模块	32
5.1.5系统备份模块	34
5.2  本章小结	35
第六章 系统测试	36
6.1功能测试	36
6.2数据和数据完整性测试	37
6.3业务周期测试	37
6.4用户界面测试	38
6.5安全性和访问控制测试	38
6.6测试结论	39
第七章 总结	40
7.1本文总结	40
7.2展望	40
参考文献	41
致  谢	42
 
摘  要
客户关系是每个公司最为重要的核心点，客户即资源，在互联网飞速发展的今天，客户关系已经不需要依靠传统的制表方式来存放了，在CRM客户关系管理这个概念提出之后，客户关系的维护得到了妥善的解决，公司无需花费大量的精力去存储客户信息，且信息的安全性得到了提高，可以将客户信息存放到公司系统服务器上，通过部署公司私有数据库的形式保证其私密安全，不再会在各大平台上存在泄露的风险，且CRM系统开发成本不高，运用Spring Boot与Vue相结合的技术，几乎可以为每家企业实现个性化定制。本文将介绍，通过将Spring Boot与Vue这两个技术相结合的方式，为一家资产公司设计并开发适用于其公司的定制化CRM客户关系管理系统。

关键词：Spring Boot，Vue，CRM系统，安全性，低成本

 
第一章  绪论
1.1 课题背景
在信息化变迁迅速的现代社会而言，时间就是金钱，客户就是资源，资源与金钱紧密相连，几乎所有的企业都需要将客户资源的存放列为重点，传统的表格本地存储不再便捷且易丢失，将信息存储在网络平台供应商上又不那么的安全，尤其是对于敏感单位而言，对信息安全及私密性更为看重。
互联网的高速发展，让客户的存储形式得到了改变，信息的存储不再拘泥于传统的电子表格，纸质表格，手机存储等，用户可以通过互联网的整合，将公司中所有业务员工收集到的客户信息，进行统一存储，利用数据库的高效性，提供统一制式化的存储方式。使用数据库的存储可以将员工的工作量进行量化，并且在使用过程中，公司可以对用户的信息进行筛选，可以根据各个公司的需求进行存储筛选，举个例子：金融行业的用户，往往更倾向于客户的投资金额，使用数据库的存储，可以对这些用户的需求进行排名，筛选，让客户的搜寻更加的精准。
在几年前，对于大部分中小企业而言，系统开发有不小的负担，请一个开发团队为其开发系统显得没太大的必要。但随着信息技术的发展系统开发成本不再那么高昂，随着后端Spring Boot框架与前端Vue框架的出现，系统的开发变得简洁了起来，开发人员可以将更多的心思放在需求的研究上去，而不是纠结于技术框架的完善，后端使用Spring Boot与Maven相结合，让系统的架构变得简单，对系统可以分模块进行开发，让系统的可扩展性变得更高，前端使用Vue与Element UI相结合，让页面的构建变得极为的简单，对于无需太大界面美观性要求的系统而言，简直是利器，两者搭配，简单高效。
1.2 研究的目的与意义
本课题研究的主要方向是为了给予中小企业在客户关系管理的问题上一套便捷高效的解决方案，客户关系是每个公司最重要的核心点，客户是资源。随着互联网的快速发展，客户关系不再需要以传统的表格方式存储。在CRM概念提出后，客户关系管理被提出，客户关系的维护得到了很好的解决，公司不需要花费大量的精力去存储客户信息，信息的安全性得到了提高。
传统的客户管理主要是以人工抄写记录并存档的方式进行，这种方式存在操作速度慢、散乱、文档易丢失、查找困难等问题，给公司客户的管理带来了极大的不便，不仅增加了管理成本，更降低了企业的运行效率。
21世纪以来，随着科学技术的不断发展，电子文档逐渐代替了传统的人工抄写的方式。电子文档虽然解决了传统管理方式的部分问题，但是并未解决客户信息的安全问题、客户管理的便利性问题等，更没有从根本上提高企业的科技现代化水平。
在这个时代，企业现代化信息技术水平的高低将成为企业竞争力强弱的重要标志。随着设备与信息价值的不断提升，企业对客户信息保密的要求也在不断提升，客户的存储逐渐成为各个公司的硬性需求。如果客户管理效率低下，企业将在日常竞争中逐步失去竞争力；如果关键客户遭到泄露，后果更是不堪设想。因此，如何利用现代化手段有效、便利地对客户进行管理，成为困扰各个公司的一个难题。各大公司都在找寻现代化的客户管理方式，所以，客户关系管理系统有着巨大的市场潜力，这也为我们的CRM客户关系管理系统带来了业务机遇。
系统的开发主要是展现其设计理念，这套设计模式可以套用到大部分的公司上，以低廉的开发成本，吸引大量的客户，从而实现系统的设计产业化，服务于大量的中小型企业。
让中小企业用上便捷廉价的系统具备很大的前景，客户关系管理系统本身的设计与开发并不是很困难，完全可以实现各个公司的定制化开发，且回报迅速，当你拥有了一个完善的CRM客户关系管理系统后，只需要在它的基础上进行更改就行，无非是对字段的更改，这让开发人员不需要耗费大量的精力在开发过程中。
我国的中小企业的数量还是很多的，CRM客户管理管理系统可以很快的抓住大量的潜在客户，当一家公司使用了本款产品后，那么他后续的开发需求将会首先考虑到本款产品的开发团队，在经济效益上是很长远的，基于此，完全可以先把产品以低价推广出去，后去在运维以及其他的方面获取潜在的收获。
1.3 研究的内容
本文将以一家资产公司为例，资产公司的客户较为广泛且详细，从CRM客户管理系统的角度为其设计并开发一套适用于大部分资产公司的CRM客户关系管理系统，一套完善的CRM系统，需要包含以下几个优势：
1、便捷的录入方式
2、保证数据的安全性
3、企业内部的数据共享
4、防恶意操作
5、完善的统计考核
为了保证录入方式的便捷，当用户输入的手机号为之前已经录入过的客户，系统将为其自动匹配，不会造成系统数据的冗余；在数据安全性上，企业可以使用自己公司的私有数据库，让数据不再在网络上裸奔，且用户的删除操作在系统中均为假删除操作，可在管理端进行恢复；系统提供了搜索功能，在企业内部数据是可以实现共享的，但员工若想查看别人的数据只能看到基本信息，而不能看到敏感信息，若需要查看需要向上级进行申请；系统提供数据自动备份的功能，若出现技术部员工删库跑路或被黑客攻击的情况，亦可恢复数据；在管理员端可以对个人或部门每一星期、季度、年度的录入情况进行导出，用以衡量其每个阶段的绩效。
本系统通过创建六类伙伴，实现对这六类伙伴的录入，查询，交接，统计等操作，从各方面来体验其高效性，且本系统的开发不仅限于一家企业的使用，本系统设计之初可使用大部分的资产管理公司，且后续若是有其他类型的公司需要使用亦可实现。
本文首先对全文进行一个概述，接着将从所用到的技术栈，将解决的技术难点，以及运用到的一些优秀的工具和技术等方面介绍相关的理论知识，然后将对系统的需求以及需求的设计方案和数据库的设计方案等方面进行项目的设计论述，最后，将对系统的详细设计实现进行展示，使用流程图的方式对其进行可视化表述。
1.4 论文的组织
第一章 绪论，主要介绍基于Spring Boot与Vue的CRM客户关系管理系统的发展背景和国内的发展现状以及本课题研究的内容；
第二章 软件开发技术,介绍了在软件开发系统的过程中所需要用到的技术；
第三章 CRM系统分析，通过对客户关系管理系统的分析，得到系统的开发需求，梳理其开发逻辑；
第四章 CRM系统设计，通过对需求的整合与梳理，进而对其进行框架上的设计，确定开发逻辑；
第五章 CRM系统实现，将分析后得到的设计结果进行详细的实现，以点及面，高效开发；
第六章 CRM系统测试，对设计实现后的产品进行黑盒测试，保证其运行的流程性；
第七章 总结与展望，总结了这次系统的开发，描述了未来的展望。
 
第二章 开发技术
2.1 Spring Boot与Vue相结合的开发模式
后端采用Spring Boot，前端采用Vue已经成为了当前企业开发中最为常用的技术框架，对于中小企业来说，使用这两个框架无疑是与企业现状最为适配的，这两种框架，学习成本低廉，在各大学习网站以及培训网站上都可以轻易的找到相应的学习资源。
使用这两个框架还可以很轻易的实现前后端的分离操作，在传统的Java Web开发过程中，前端需要通过JSP进行编写，但是JSP需要嵌入到Java代码界面，使得界面的开发不是那么的友好。当我们想要实现，前端独立编写客户端代码，后端独立编写服务端代码，前端通过后端给予的数据接口来实现数据的调用即可的操作时，Spring Boot与Vue相结合的开发模式出现了。前端通过请求来获取后端的接口数据，将Model展示到View中即可。
前端和后端开发人员只需要事先记录接口(url、参数、数据类型)达成协议。然后独立开发就可以了，前端可以使用假数据测试，不需要依赖后端，最后完成前端和后端集成，真正实现了前后端应用的解耦，大大提高了开发效率。
如图2-1所示，为传统的单体应用设计图：
 
图2-1 单体应用设计图
可以看到，传统单体应用在服务端就囊括了Java服务和JSP页面，耦合度很高，不利于系统的后期维护。
如图2-2所示，为前后端分离项目设计图：
 
图2-2 前后端分离项目设计图
该模式下，前端应用和后端应用分离开来了，前端和后端的耦合度变低了，通过接口的形式让数据进行传递，方便了后期代码的维护。
2.2 CRM系统概述
CRM这个词汇对于不理解他的人来说会显得很突兀，那么什么时CRM呢，他的全称为Customer Relationship Management翻译为客户关系管理，顾名思义，他的设计就是为了对客户的关系进行管理，CRM系统的设计就是为了从系统的层面来实现对客户关系的管理。
CRM的目标为吸引新客户，保留老客户以及将现有的客户转为忠实的客户，通过维持客户关系来增加市场分额。CRM可以用来实现B2B以及B2C，B2B用来管理企业客户，B2C用来管理个人客户。
使用了CRM客户关系管理系统，可以提高员工的工作效率，维护老客户，发掘新客户，避免客户的分散从而造成客户的流失，提高客户的满意度与忠诚度，降低公司经营成本，从而更好的指导员工的工作。
CRM系统的服务对象非常的广泛，对于大部分公司而言，CRM系统都是有必要的，只要企业涉及到销售，做到销售有关的业务，都是有必要拥有自己的一套CRM系统的。
2.3 AOP定时任务
在生产生活中，定时任务不可缺少，项目开发中定时备份是一个常见的需求，一般在Java中有三种实现定时任务的方法。第一种是使用JDK自带的Timer，第二种是使用组件Quartz，第三种是使用Spring提供的Spring Task。
Timer简单但是无法满足复杂的定时规则，Quartz太过于笨重，在实际的生产中，使用的更多的是用SpringTask来实现复杂的定时任务。
Spring Boot中提出了面向切面的编程思想，定时任务就可以采用此种设计思想，在项目开发过程中利用AOP对项目的业务逻辑进行隔离，降低耦合度，我们可以通过动态代理的方式，在程序运行时创建一个定时任务，具体实现步骤如下：
1、通过@Scheduled注解创建定时任务
2、在spring boot项目启动类上添加@EnableScheduling注解开启定时任务
3、启动Spring Boot项目
2.4 Vue3框架
在此处需要单独的将Vue3框架拿出来说明下，在2022年2月7号开始，Vue3成为了官方推荐的默认版本，并且Vue3与TypeScript相结合的开发模式已经成为了目前时代的主流编程模式，Vue3的源码使用TS进行了重写，对于类型的推导更加的便捷。
学习Vue，最为关键的就是抓住Vue的生命周期函数，Vue3的生命周期函数与Vue2有些许的区别，对于学过Vue2的人来说，Vue3的编程习惯发生了很大的改变，Vue3中可以继续使用Vue2中的生命周期钩子，但是其中有两个钩子已经更名：
beforeDestroy改名为 beforeUnmount
destroyed改名为 unmounted
Vue3也提供了Composition API形式的生命周期钩子，与Vue2中钩子对应关系如下：
beforeCreate===>setup()
created=======>setup()
beforeMount ===>onBeforeMount
mounted=======>onMounted
beforeUpdate===>onBeforeUpdate
updated===>onUpdated
beforeUnmount ==>onBeforeUnmount
unmounted =====>onUnmounted
Vue3与Vue2的生命周期对比图，如图2-3所示，可以看到他与Vue2的生命周期有了明显的变化。
 
图2-3 Vue3与Vue2的生命周期对比图
 
第三章 系统分析
3.1可行性分析
3.1.1商业可行性
随着科技水平的不断提升，企业对客户的需求越来越大，对客户存储的高效性依赖程度也越来越高。然而企业在客户管理上依旧依靠纸质记录及客户管理人员经验进行管理。这种陈旧的管理方式已不再适应新时代的要求，不能满足企业对于重要客户的严格管理需求，它存在着操作速度慢、散乱、复杂等一系列缺点与不足。     由这些不足导致的管理档案丢失等问题都会给客户管理人员带来很大程度的管理滞后，从而增加不必要的管理成本，降低企业生产力。在这种前提下，一个便捷的客户关系管理系统的出现成为必然，且将会提高企业客户管理效率，降低企业生产成本。     通过查阅论文和搜集数据，详细分析了目前国内的客户关系平台的发展现状，并进行了详细的需求分析和系统设计，确保系统符合常规的客户管理流程，并提高系统的安全可靠性，实现创新突破。     因此，开发智能化客户管理系统是具有商业可行性的，在系统的有效性得到验证后，还可以扩展应用场景，为公司带来商业利益，扩大公司影响力。
3.1.2软件可行性
在技术方面，根据实际需求分析各种架构的利弊，确定了以何种架构构建系统。在确定总体格局后，分析各个架构的利弊，找出综合指数最高的一个进行方案设计，并给出系统未来发展的技术路线。确定总体方案后划分系统功能模块，明确各个模块的功能和相互关系。针对不同的模块找出关键技术，查阅相关资料和咨询专家分析关键技术的实现方案，从技术实现难度、稳定性、功能、资金方面分析利弊，找出最佳解决方案。     在经济方面，根据技术分析，确定相关技术引进需要的资金花费。标准软件估算模式从多方面分析该系统实施的成本，以及收益，也包括外包收益的相关内容的分析。     在法律方面，查阅文献以及咨询相关专家，保证各个环节合法合理的实施。本系统通过自身门户网站以及后台管理系统拉取用户信息、读取用户数据均采用合法途径。
3.1.3外包可行性
财务方面：将系统开发外包给本款产品开发团队，公司可以削减一部分不必要的开支，控制成本，从而解放一部分资产用于其他项目投资。     技术方面：能获得高水平的信息技术工作者的产品，改善技术服务，降低成本，提高利润。     战略方面：借助智能化手段加强公司在招聘方面的能力，获得更合适的人才；可以提高服务响应速度与效率，在激烈的市场竞争中取得先机。     人力资源方面：公司无需再扩大人力规模，从而减少了因招聘工作而花费的精力、成本以及面临的压力，增加了人力资源配置的灵活性。同时可以大大缩减人力资源，节约资金可投资其他项目。     综上所述，公司将其客户关系管理系统外包给本款产品开发团队实施是可行的。
3.1.4可行性分析结论
通过可行性分析对项目的主要内容和配套条件，从技术、经济、工程等方面进行调查研究和分析比较，为项目决策提供依据。经研究后发现客户关系管理系统可以提高效率，实时掌握项目进展情况，利用信息化的管理手段实现对公司客户的实时管理，提供项目成员之间及公司管理层之间信息交流的及时性，有效配置和共享资源，从而减少计划拖延， 提高核心竞争力，扩大企业的生产规模。项目风险小，投资回报率高，投资方案可行。综上所述，客户关系管理系统的实施是可行的。
3.2需求分析
系统需要为资产、资金、退出、同业、政府、司法等6类伙伴关系提供输入、查询、输出报表功能，以及为这些客户关系提供的基础字典的维护功能。
对于伙伴的录入，将提供权限给公司员工，由员工进行伙伴的录入，当伙伴录入成功后，系统将对伙伴进行保存，若该伙伴为已录入伙伴，但不在此类目中，系统需对其进行基础信息的自动匹配。
对于伙伴的查询，所有员工均可在伙伴查询界面查询到公司的所有伙伴，但仅可以看到自己录入伙伴的详细信息，对于非本人录入的信息，将没有基本信息的查看权限，信息将隐藏，须在线下进行申请后，由公司内部调配。
部门的主管可以看到该部门员工的录入情况。
员工与主管的用例图如图3-1所示：
 
图3-1 员工与主管用例图
管理员需具备最基本的公司部门设置，公司员工设置等基本功能。
管理员可以对系统的所有伙伴进行管理，系统中所有的伙伴删除均为假删除，预防离职员工的恶意操作，管理员可以对这些伙伴进行交接以及恢复操作。
对于基础字典的维护，将仅对管理员开通此权限，在伙伴录入过程中所有需要用到的字典项均可由管理员来调配。
公司管理员可以对所有的员工录入情况进行报表的导出，记录其每星期，每月，每季度的录入情况，可以在系统中查看，亦可导出成报表的形式进行查看备份。
并且系统本身需提供自动备份的功能，防止有人恶意操作或者删除数据库，对公司财产进行损害。
管理员的用例图如图3-2所示：
 图3-2 管理员用例图
3.3模块分析
根据业务需求，系统需要为6类伙伴关系提供输入、查询、输出报表功能，以及为这些客户关系提供的基础字典的维护功能。
业务模块如下：
资产伙伴：
资产伙伴模块提供的功能包括新增资产伙伴，编辑资产伙伴，根据关键字查询资产伙伴、导出资产伙伴。
新增——必填字段：基本信息，机构类型、债权属性、业务类型（至少一个），覆盖区域（至少1个）。
编辑——必填字段：同新增要求。
查询——根据伙伴名字、资产属性、债权属性、业务类型等多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
资金伙伴：
退出伙伴模块提供的功能包括新增资金伙伴，编辑资金伙伴，根据关键字查询资金伙伴、导出资金伙伴。
新增——必填字段：基本信息，机构类型，投资结构偏好（至少一项），区域偏好（至少一项），资产偏好（至少一项），收益要求（至少一项）。
编辑——要求同上。
查询——根据名称、机构类型、投资结构偏好，区域，资产偏好，收益要求多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
退出伙伴：
退出伙伴模块提供的功能包括新增退出伙伴，编辑退出伙伴，根据关键字查询退出伙伴、导出退出伙伴。
新增——必填字段：基本信息，退出类型，用途偏好（至少一项），投资能力（至少一项），覆盖区域(至少一项)，资产偏好（至少一项）。
编辑——同上。
查询——根据基本信息、退出类型，用途偏好等多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
司法伙伴：
司法伙伴模块提供的功能包括新增司法伙伴，编辑司法伙伴，根据关键字查询司法伙伴、导出司法伙伴。
新增——必填字段：基本信息，现任职务、机构，历任职务、机构，配偶职务、机构。
编辑——要求由上。
查询——根据责任职务、历任职务、机构进行多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
同业伙伴：
同业伙伴模块提供的功能包括新增同业伙伴，编辑同业伙伴，根据关键字查询同业伙伴、导出同业伙伴。
新增——必填字段：基本信息、机构类型、合作方式、业务类型、覆盖区域（至少一项）。
编辑——要求同上。
查询——可根据基本信息、机构类型、合作方式、业务类型、覆盖区域多条件多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
政府伙伴：
政府伙伴模块提供的功能包括新增政府伙伴，编辑政府伙伴，根据关键字查询政府伙伴、导出政府伙伴。
新增——必填字段包括基本信息、机构名称、管理区域、职务。
编辑——同上。
查询——根据基本信息、机构名称、管理区域、职务多条件组合查询。
导出excel——根据查询的结果生成excel表格（需要给定模板样例）。
后台模块如下：
字典维护：对所有CRM系统中用到的字典对象进行维护。
部门管理：设置公司所有部门相关信息，考虑数据的完整性，使用逻辑删除。
用户管理：设置公司所有用户相关信息，考虑数据的完整性，使用逻辑删除。
角色管理：设置系统使用者的角色。
伙伴管理：对公司所有伙伴进行维护，考虑员工恶意操作可能性，可以对已删除员工进行恢复操作。
数据备份：后端对数据每晚24点进行备份，备份后的数据在该处进行显示，可以下载存放。
 
第四章 系统设计
4.1系统分层介绍
客户端主要是web客户端，Web客户端主要指web浏览器(Browser)。其主要功能是将用户向服务器请求的Web资源呈现出来，显示在浏览器窗口中。资源通常有html、pdf、image及其他格式。通过web客户端组件协作展示用户界面。服务端主要采用的是JavaWeb开发的Spring Boot三层架构。
三层架构分为：数据访问层（mapper，持久层），业务逻辑层（service，业务层），表示层（controller，表示层）。
数据访问层：也是Dao层，持久层，主要负责数据库的访问，可以对数据库进行增、删、改、查的操作。既然mapper层是直接与数据库相挂钩的，所以要先连接数据库。     业务逻辑层：主要负责业务处理和数据传递，将数据访问层传来的数据加工处理，并将数据传给表示层。表现层依赖业务层，但是业务层并不依赖表现层，但是业务层在进行业务处理时会依赖持久层。
表示层：也是控制器层，主要负责将业务逻辑层处理好的数据展示给用户。controller层的功能为请求和响应控制。controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。     数据库：数据库使用的是MySQL数据库，是市面上比较流行的数据库，具有较好的数据存储和数据操作。
运行环境：此系统可上传至服务器，本次上传的是阿里云的ESC共享型n4服务器。
4.2系统功能结构
系统的功能模块分为两大部分，分别时业务模块和后台模块，业务模块与部门主管和员工的用例相符合，后台模块与管理员用例相符合。系统的功能结构图如图4-1所示：
 图4-1 系统功能结构图
4.3系统功能设计
CRM客户关系管理系统，主要工作任务为客户的录入，理清客户的录入是最为关键的一个步骤，通过时序图的方式，可以很清晰的清楚客户录入的每一个步骤，在录入之后，整个系统应该进行哪些相对应的操作来保存客户的信息，在本系统通过伙伴来表示需要录入的客户，伙伴录入时序图如图4-2所示：
 
图4-2 伙伴录入时序图
绩效考核：默认为最近一个星期的伙伴录入数量，可通过日期的选择查看数据，绩效考核时序图如图4-3所示：
 
图4-3 绩效考核时序图
4.4数据库设计
4.4.1数据库需求分析
根据系统的模块分析，我们可以得出，系统最主要的伙伴表的结构，可以通过设计一张伙伴总表来存放六类伙伴信息。
存放录入人信息：姓名、部门。
存放伙伴联系人信息：姓名、性别、手机号码、微信号、电子邮箱、单位名称、联系地址、部门、岗位。
存放伙伴基本信息：伙伴来源、伙伴类型、机构类型、债权属性、业务类型（可多选）、覆盖区域（可多选）、资金类型、投资结构、资产偏好（可多选）、收益要求（可多选）、合作方式（可多选）、用途偏好（可多选）、投资规模、现任职务、曾任职务（选填，可增加）、关系人情况（选填）等。
由于客户关系管理系统一经使用，每天可能会产生大量数据。因此，在本系统中数据库的设计，要考虑和遵循下列数据库设计的基本原则，以建立稳定、安全、可靠的数据库。
一致性原则：对数据来源进行统一、系统的分析与设计，协调好各种数据源，保证数据的一致性和有效性。
完整性原则：数据库的完整性是指数据的正确性和相容性。要防止合法用户使用数据库时向数据库加入不合语义的数据。对输入到数据库中的数据要有审核和约束机制。
安全性原则：数据库的安全性是指保护数据，防止非法用户使用数据库或合法用户非法使用数据库造成数据泄露、更改或破坏。要有认证和授权机制。
可伸缩性与可扩展性原则：数据库结构的设计应充分考虑发展的需要、移植的需要，具有良好的扩展性、伸缩性和适度冗余。
规范化：数据库的设计应遵循规范化理论。规范化的数据库设计，可以减少数据库插入、删除、修改等操作时的异常和错误，降低数据冗余度等。
4.4.2实体之间的E–R模型
本系统的数据库设计主要用来存放客户关系，需要对客户所涉及到的所有情况都记录下来，系统主要包含了三类主体，伙伴录入人员，系统管理员以及系统本身，伙伴录入人员需要包含录入人员的信息以及被录入伙伴的信息，系统管理员需要包含管理员自身信息以及对系统伙伴录入情况的统计信息，系统自身同样需要包含一个CRM系统所具备的字典库、系统控制路由以及与伙伴相关的基本数据。
具体E-R图如图4-4所示：
 
图4-4 系统E-R图
4.4.3 数据库逻辑结构设计
CRM客户关系管理系统主要包含了以下十张表，主要用来存放系统用户信息（包含用户管理表、季度/年度绩效目标表、用户角色表、系统部门表），录入伙伴信息（包含伙伴信息表、伙伴类型表），系统信息（包含路径管理表、角色-路径关系表、伙伴字典表、地区管理表）三个主体。具体数据表的设计如表2-1到表2-10的表格所示
（1）、路径管理表crm_menu
路径管理表主要用来存放系统的路由，包含系统的所有已存在路由，通过动态加载的方式与前端相匹配。
表4-1  路径管理表
字段名	是否为空	字段类型	主键	描述
menu_id	NO	varchar(10)	PRI	路径id
menu_name	YES	varchar(100)	　	路径名称
menu_path	YES	varchar(100)	　	路径地址
（2）、伙伴信息表crm_partner
伙伴信息表主要用来存放所有类型的伙伴信息，将伙伴的通用属性设置为单个字段，将各自拥有的字段以JSON数据的格式存放。
表4-2  伙伴信息表
字段名	是否为空	字段类型	主键	描述
address	YES	varchar(200)	　	联系地址
asset_info	YES	json	　	资产伙伴
company	YES	varchar(100)	　	单位名称
create_time	YES	datetime	　	创建时间
create_user_id	YES	varchar(36)	　	创建人id
debt	YES	varchar(200)	　	伙伴对应债权
department	YES	varchar(50)	　	工作部门
disabled	YES	int(11)	　	是否删除
email	YES	varchar(50)	　	邮箱
exit_info	YES	json	　	退出伙伴
exit_type	YES	varchar(100)	　	退出类型
fund_info	YES	json	　	资金伙伴
item	YES	varchar(200)	　	伙伴对应项目
justice_info	YES	json	　	司法伙伴
name	YES	varchar(100)	　	姓名
note	YES	varchar(1000)	　	备注
org_info	YES	json	　	政府伙伴
org_remark	YES	varchar(100)	　	机构类型备注
org_type	YES	json	　	机构类型
over_area	YES	json	　	地区
partner_id	NO	varchar(36)	PRI	伙伴id
partner_type	YES	int(11)	MUL	伙伴类型
peer_info	YES	json	　	同业伙伴
post	YES	varchar(100)	　	工作岗位
sex	YES	varchar(2)	　	性别
source	YES	varchar(100)	　	伙伴来源
telephone	YES	varchar(100)	　	手机号
telephone_list	YES	varchar(100)	　	其他联系方式
update_time	YES	datetime	　	更新时间
weixin	YES	varchar(100)	　	微信
（3）、伙伴类型表crm_partner_type
伙伴类型表主要存放了该系统中所有需要存放的伙伴的类型，系统设计服务于资产公司，因此包含了六类伙伴，定制化时可以动态的更改。
表4-3  伙伴类型表
字段名	是否为空	字段类型	主键	描述
partner_name	YES	varchar(100)	　	类型名称
partner_type	NO	int(11)	PRI	类型值
（4）、角色管理表crm_role
角色管理表主要用来存放系统的使用角色，根据角色进入不同的界面，该系统主要包含了三类角色，管理员，部门经理以及部门员工。
表4-4  角色管理表
字段名	是否为空	字段类型	主键	描述
role_id	NO	varchar(10)	PRI	角色id
role_name	YES	varchar(30)	　	角色名称
（5）、角色-路径关系表crm_role_menu
角色路径关系表主要用来将路由与角色进行绑定，实现不同角色登录系统后进入所对应的路由界面，通过该表实现路由权限的设定。
表4-5  角色-路径关系表
字段名	是否为空	字段类型	主键	描述
create_time	YES	datetime	　	创建时间
menu_id	NO	varchar(10)	PRI	路径对应id
role_id	NO	varchar(10)	PRI	角色名称
（6）、伙伴字典表crm_sys_dict
伙伴字典表主要用来存放所有CRM系统中所要用到的字典项，在其他表中存放其主键，通过表连接的方式，实现值的查询，主要服务于伙伴录入时的下拉框字段。
表4-6  伙伴字典表
字段名	是否为空	字段类型	主键	描述
dic_key	YES	varchar(100)	　	标签名称
dic_value	YES	varchar(100)	　	标签值
disabled	NO	int(11)	　	是否删除
group_key	YES	varchar(100)	　	分组名称
group_name	YES	varchar(100)	　	分组名称
id	NO	int(11)	PRI	伙伴字典id
（7）、季度/年度目标管理表crm_user_aim
目标管理表主要用来存放每个季度以及年度需要员工所实现的目标，通过查询部门可以查看部门的目标，通过查询个人可以查询个人的目标，所有字段均可作为在系统中的筛选项。
表4-7  季度/年度目标管理表
字段名	是否为空	字段类型	主键	描述
create_time	YES	datetime	　	创建时间
dep_id	YES	varchar(10)	MUL	部门id
id	NO	int(11)	PRI	目标id
quarter1	YES	int(11)	　	第一季度
quarter2	YES	int(11)	　	第二季度
quarter3	YES	int(11)	　	第三季度
quarter4	YES	int(11)	　	第四季度
update_time	YES	datetime	　	更新时间
user_id	YES	varchar(36)	MUL	用户id
year	YES	varchar(100)	　	年份
yr	YES	int(11)	　	年度目标
（8）、系统部门表sys_department
系统部门表主要用来存放系统中所定义的所有部门信息。
表4-8  系统部门表
字段名	是否为空	字段类型	主键	描述
dep_name	YES	varchar(100)	　	部门名称
disabled	YES	int(11)	　	是否删除
id	NO	varchar(100)	PRI	部门编号
（9）、地区管理表sys_region
地区管理表存放了全国所有的地区，通过parent_id实现地区的分级，最高可到三级地区，即省市县，用以记录公司的伙伴业务范围。
表4-9  地区管理表
字段名	是否为空	字段类型	主键	描述
parent_id	YES	varchar(50)	　	二级地区id
region_id	NO	varchar(50)	　	地区id
region_level	YES	int(11)	　	地区层次
region_name	YES	varchar(100)	　	地区名称
sorted	YES	int(11)	　	分类
（10）、用户管理表sys_user
用户管理表主要用来存放系统的使用用户信息，员工密码采用MD5加密格式，所有员工的删除使用假删除的方式，以便离职后对用户的数据进行转移。
表4-10  用户管理表
字段名	是否为空	字段类型	主键	描述
avatar_url	YES	varchar(255)	　	头像
create_time	YES	datetime	　	创建时间
dep_id	YES	varchar(10)	MUL	部门id
ding_ding	YES	varchar(100)	　	钉钉号
disabled	YES	int(11)	　	是否删除
last_login	YES	datetime	　	最后登录时间
login_name	NO	varchar(100)	UNI	登录名
login_pass	YES	varchar(100)	　	密码
role_id	YES	varchar(10)	MUL	角色id
telephone	YES	varchar(100)	　	手机号
true_name	YES	varchar(100)	　	真实姓名
user_id	NO	varchar(36)	PRI	用户id
 
第五章 系统实现
5.1系统模块的具体实现
5.1.1伙伴录入模块
伙伴录入模块分为个人伙伴查询和伙伴录入以及伙伴删除三个功能，伙伴查询功能如图5-1所示：
  图5-1 查询功能
普通用户在六类伙伴界面都可以根据伙伴姓名和手机号对各自录入的伙伴进行查询操作。
姓名为模糊查询，例如：想搜索所有“王”姓的伙伴，可直接输入“王”进行查询，亦可完整搜索。
手机号为模糊查询，可搜索本人手机号和其他联系方式里的内容，例如：想搜索所有“188”开头的手机号，可直接输入“188”进行查询，想搜索其他联系方式亦可执行相同操作，同样可完整搜索。
具体查询SQL如下所示：
  @Select({"<script>" +
            "select * from crm_partner where disabled=0 " +
            "<if test='partnerType != null and partnerType!=\"\"'>" +
            " and partner_type = #{partnerType}",
            "</if>" +
                    "<if test='value != null and value!=\"\"'>" +
                    " and (telephone like '%${value}%' or  name like '%${value}%' or telephone_list->'$[*].telephones' like '%${value}%' or company like '%${value}%')",
            "</if>" +

                    " order BY update_time  DESC" +
                    "</script>"
    })

伙伴录入功能如图5-2所示：
 图5-2 伙伴录入
六类伙伴的录入拥有以上相同的录入项
姓名：必填项，请输入两个字及以上的姓名，可输入英文名。
手机号：必填项，纯数字输入框，请输入十一位手机号码，若该手机号对应的伙伴已经被自己录入，输入手机号可自行匹配以上基础信息。
其他联系方式：可在其中录入该联系人的其他联系方式，无格式限制，可被搜索。
电子邮箱：必填项，请输入标准邮箱格式。
单位名称：必填项，无格式限制
其他项：非必填
伙伴删除功能如图5-3所示：
 图5-3 伙伴删除
点击确定即可删除该伙伴，删除后为假删除，在系统管理员端可以看到该用户删除的伙伴。
5.1.2伙伴查询模块
可通过单位名称，机构类型，债权属性，业务类型，覆盖区域进行连接查询，点击重置，将前面输入项清空。伙伴查询如图5-4所示：
 图5-4 伙伴查询
点击查看，可查看被搜索到符合要求的伙伴信息，若该伙伴输入自己，可看到完整信息，若该伙伴不属于自己，关键信息被隐藏，若想看到完整信息，可向管理员线下提出查看申请，查看完整信息。伙伴查看如图5-5所示：
 
图5-5 伙伴查看
5.1.3伙伴管理模块
可通过上方的查询条件进行连接查询，和员工系统部分操作相同。该模块可查看所有伙伴，并对伙伴信息进行信息的编辑，恢复，交接，导出。如图5-6至5-8所示：
 
图5-6伙伴管理
 
图5-7 伙伴导出
 
图5-8 伙伴交接
编辑：点击编辑按钮，可以编辑该伙伴的详细信息。
恢复：已被删除的伙伴后面会出现恢复按钮，点击恢复可以将删除的伙伴进行恢复。
交接：选择需要交接的伙伴（每个伙伴前面都有复选框，可选择），点击交接，选择转入人。
导出：可以导出查询到的伙伴信息。
主要查询代码如下：
@Select({
            "<script>",
            "select crm_partner.*,sys_user.true_name as trueName from crm_partner left join sys_user on crm_partner.create_user_id =sys_user.user_id" +
                    " where   crm_partner.partner_type = #{partnerType} and crm_partner.disabled=0 " +
                    "<if test='company != null and company!=\"\"'>" +
                    " and company like '%${company}%' ",
            "</if>" +
                    "<if test='createId != null and createId!=\"\"'>" +
                    " and crm_partner.create_user_id = #{createId}",
            "</if>" +
                    "<if test='typeId != null and typeId!=\"\"'>" +
                    " and json_contains(asset_info->'$.businessType[*]','\"${typeId}\"')",
            "</if>" +
                    "<if test='belong != null and belong!=\"\"'>" +
                    " and asset_info->'$.belong'=#{belong}",
            "</if>",
            "<if test='orgType != null and orgType!=\"\"'>" +
                    "  and  JSON_CONTAINS(org_type->'$[*]' , '\"${orgType}\"')",
            "</if>" +
                    "<if test='orgRemark != null and orgRemark!=\"\"'>" +
                    " and crm_partner.org_remark = #{orgRemark}",
            "</if>" +
                    "<if test='cities != null and cities.length>0'>" +
                    "<foreach collection='cities' item='id' open='and (' separator=' or ' close=')'>",
            "  JSON_CONTAINS(over_area->'$[*][1]','\"${id}\"')",
            "</foreach>",
            "</if>" +
                    " order BY crm_partner.update_time  DESC" +

                    "</script>" })
5.1.4系统设置模块
共有部门设置，伙伴字典，业务字典，用户设置，绩效统计等部分。
部门设置：需注意，添加新部门时，部门编号不能相同，如图5-9所示：
 
图5-9部门设置
伙伴字典：需注意，添加新内容时，标签值不能重复，如图5-10所示：
 
图5-10伙伴字典
用户设置：需注意，用户名具有唯一性，一旦确定不能更改，如图5-11所示：
 
图5-11用户设置
5.1.5系统备份模块
系统备份模块提供了系统的每天数据库的备份信息，可以在此处进行数据库的备份下载，文件名以时间加日期的方式命名。如图5-12所示：
 
图5-12 系统备份
关键备份代码如下所示：
private boolean exportDatabase(String userName, String password, String bakFileName) {
        PrintWriter printWriter = null;
        BufferedReader bufferedReader = null;
        try {printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(bakFileName), "utf8"));
         Process process = Runtime.getRuntime().exec(" mysqldump -h 127.0.0.1" + " -u" + userName + " -p" + password + " --set-charset=UTF8 fcwrdb");
            InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), "utf8");
            bufferedReader = new BufferedReader(inputStreamReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                printWriter.println(line); }
            printWriter.flush();
            if (process.waitFor() == 0) {//0 表示线程正常终止。
                return true;
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bufferedReader != null) {
                    bufferedReader.close();
                }
                if (printWriter != null) {
                    printWriter.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
}
5.2  本章小结
本章是本文的主体部份,详细介绍了系统各模块的功能与实现,而且加附了一些模块的主要功能代码,便于读者的理解。
 
第六章 系统测试
6.1功能测试
我这次设计的系统，我使用了黑盒测试。黑盒测试就是对系统的功能进行测试。在测试期间，针对系统的操作步骤，等到其操作结果，对操作结果进行分析，从而判断其是否能够达到系统设计的预期功能性要求。
伙伴录入模块测试
伙伴录入功能有效等价类，员工通过伙伴新增进行伙伴的录入，且录入成功，如表6-1所示：
表6-1 伙伴录入有效等价类
测试项类型	有效等价类
优先级	高
测试项描述	通过系统进行伙伴录入操作成功
预置条件	该伙伴在该类型暂未录入
用例序号	输入	执行步骤	结果
001	输入伙伴信息	1、点击伙伴录入
2、输入该伙伴的基本信息
3、匹配手机号
4、未匹配伙伴信息
5、完善伙伴录入信息
6、点击保存	录入成功
002	输入已有其他类型伙伴信息	1、点击伙伴录入
2、输入该伙伴基本信息
3、匹配手机号
4、自动匹配成功
5、完善伙伴该类型信息
6、点击保存	录入成功
伙伴录入功能无效等价类，员工通过系统进行员工的录入，未能成功录入伙伴，如表6-2所示：
表6-2 伙伴录入无效等价类
测试项类型	无效等价类
优先级	高
测试项描述	通过系统进行伙伴录入操作失败
预置条件	系统中已有该伙伴信息
用例序号	输入	执行步骤	结果
001	输入已有该类型的伙伴信息	1、点击伙伴录入
2、输入该伙伴基本信息
3、匹配手机号
4、自动匹配成功
5、完善伙伴该类型信息
6、点击保存	伙伴录入失败，提示“已有该伙伴信息，请勿重复录入”
6.2数据和数据完整性测试
数据库和数据库进程应作为客户信息管理系统中的子系统来进行测试。在测试这些子系统时,应在没有将测试对象的用户界面用作数据的接口的情况下进行。对于数据库管理系统(DBMS),还需要进行深入的研究,以确定可以支持以下测试的工具和方法。
完整性测试表如表6-3所示：
表6-3 完整性测试表
测试目标	确保数据库访问方法和进程正常执行，不会遭到损坏。
方法	1、调用各个数据库访问方法和进程，并在其中分别填充有效的和无效的数据或对数据的请求。
2、检查数据库，确保数据已按预期的方式填充，并且所有的数据库事件都按正常方式发生；或者检查所返回的数据，确保（为正当的理由）检索到了正确的数据。
3、重复1、2种的操作，增加数据库的访问量，检查此时数据库的访问方法和进程的运行情况。
完成标准	所有的数据库访问方法和进程都按照设计的方式运行，数据没有遭到损坏。
需考虑的特殊事项	1、测试可能需要DBMS开发环境或驱动程序在数据库中直接输入或修改数据。
2、进程应该以手工方式调用。
3、应使用小型或最小的数据库（记录的数量有限）来使所有不可接受事件具有更高的可见性。
6.3业务周期测试
业务周期测试应模拟在一段时间内对客户关系管理系统执行的活动。应先确定一段时间(例如一个备份周期) ,然后执行将在该时段内发生的事务和活动。这种测试包括所有的每日、每周和每月的周期和业务周期,以及所有与日期相关的事件(如备份记录) 。
业务周期测试表如表6-4所示：
表6-4 业务周期测试表
测试目标	确保测试对象及后台进程都按照所要求的业务模型和时间正确运行表
方法	通过执行以下活动，测试将模拟若干个业务周期：
1、将修改或增强对测试对象进行的功能测试,以增加每项功能的执行次数,从而在指定的时段内模拟若干个不同的用户。
2、将使用有效的和无效的日期或时段来执行所有与时间或日期相关的功能。
3、将在适当的时候执行或启动所有周期性出现的功能。
4、在测试中还将使用有效的和无效的数据,以核实以下内容:
①在使用有效数据时得到预期的结果。
②在使用无效数据时显示相应的错误消息或警告消息。
③各业务规则都得到了正确的应用。
完成标准	所有的计划测试已全部执行；
所有确定缺陷已全部解决。
需考虑的特殊事项	系统日期和事件可能需要特殊的支持活动。
需要通过业务模型来确定相应的测试需求和测试过程。
6.4用户界面测试
通过用户界面测试来核实用户与软件的交互 UI 的完成情况。测试目的在于确保用户界面向用户提供了适当的访问和浏览应用程序功能的操作。除此之外，UI测试还要确保 UI 功能内部的对象符合预期要求，并遵循公司或行业的标准。     用户界面测试表如表6-5所示：
表6-5 用户界面测试表
测试目标	浏览网页可正确地反映出业务的功能和需求，其中包括窗口与窗口之间、字段与字段之间的浏览，以及在不同浏览器、不同的移动设备的显示效果；窗口的对象和特征（例如菜单、大小、位置、状态和中心）都符合标准。
方法	创建或修改每个窗口的测试，以核实各个网页系统窗口和对象都可正确地进行浏览，并且对象处于正常状态。
完成标准	成功核实每个窗口都与基准版本保持一致，或符合可接受标准。
需考虑的特殊事项	需要在以下IE，Firefox，Edge，Chrome 浏览器查看效果。
需在不同型号的PC设备上查看效果。
6.5安全性和访问控制测试
安全性和访问控制测试侧重于安全性的两个关键方面：
（1）网页系统的安全性，包括对数据或业务功能的访问； 
（2）系统的安全性，包括对系统的登录或远程访问。
网页系统的安全性可确保：在预期的安全性情况下，用户只能访问特定的功能，或者只能访问有限的数据。例如，用户对某模块的访问权限只有当管理员授予后才能访问，授予权限包括完全访问、只读权限、无权限。用户不能越权访问。
系统的安全性可确保只有具备系统访问权限的用户才能访问网页系统，而且只能通过相应的网关来访问，如表6-6所示。
表6-6 安全性和访问控制测试表
测试目标	功能/数据的安全性：核实用户只能访问其所属用户类型已被授权访问的那些功能/数据。
方法	功能/数据的安全性：核实用户只能访问其所属用户类型已被授权访问的那些功能/数据。 
系统安全性：核实只有具备网页系统访问权限的那些用户才能访问系统。
完成标准	各种已知的用户类型都可访问相应的功能或数据，而且所有事务都按照预期的方式运行，并在先前的网页系统功能测试中运行了所有的事务。
需考虑的特殊事项	必须与相应的网络或系统管理员一起对系统访问权进行检查和讨论由于此测试可能是网络管理或系统管理的职能。
6.6测试结论
经过系统测试，系统基本完成了预期系统设计的全部工作，功能完备运行流程，满足日常使用的需求。但是也发现了一些问题，如：伙伴的输入依旧不够便捷，应该是先输入手机号再输入基本信息，需要修改下操作逻辑顺序。经过查看源码修改上面的问题都解决了。
 
第七章 总结
7.1本文总结
通过自学SpringBoot和Vue，基本掌握了前后端分离编程的模式，在后端技术上对Java有了更加深入的理解，对前端产生了浓厚的兴趣，在完成项目的过程中，一步步的采用软件工程化的思想进行编程，整合所学知识，让其形成一个体系，发掘了自己对编程中侧重点。
系统的详细设计即你对系统的认知步骤，是一个层层递进的步骤，从需求的分析，到这些需求的设计，以及最后对设计的实现，完善每一个功能模块，最后形成了一套成熟可行的系统。
这个毕业设计必将是我人生中最为关键的作品之一，他融合了我在学生时代的所有所学知识体系，让我意识到了每一个课程的设立都是有意义的，在产品的设计与实现的过程中都会用到所学到的知识。
7.2展望
经过本次毕业论文的设计到实现，增强了我对基础知识的认知，在编程的过程中，在许多地方都用到了基础知识，基础知识的扎实与否直接决定了编程的效率，在此给我留下了深刻的印象。
系统的界面不太美观，且系统中仍然存在一些不足，比如缺少一些在线预览功能，以及审批流等等，这些我都会在以后进行学习，并加以改善。

 
